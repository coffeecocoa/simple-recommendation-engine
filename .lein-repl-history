(conj 1 [2 3 4])
(conj [2 3 4] 1)
(conj [1 5] [2 3 4])
(conj [2 3 4] [1 6])
(cons [2 3 4] [1 6])
(cons 1 [2 3 4])
(cons [1 5] [2 3 4])
(merge-with (partial merge-with +) p1 p2 p3)
(merge-with + 
           {:a 1  :b 2}
           {:a 9  :b 98  :c 0}
           {:a 10 :b 100 :c 10}
           {:a 5}
           {:c 5  :d 42})
(merge-with (partial merge-with +) 
           {:a 1  :b 2}
           {:a 9  :b 98  :c 0}
           {:a 10 :b 100 :c 10}
           {:a 5}
           {:c 5  :d 42})
(merge-with (partial merge-with +)
   {:x {:y {:a 1}}}
   {:x {:y {:a 3 :b 2}}})
(merge-with (partial merge-with +)
   {:x {:y 3}}
  {:x {:y 4}})
(merge-with (partial merge-with +)
   {:x {:y 3 :g 5}}
  {:x {:y 4}})
(merge-with (partial merge-with +)
   {:x {:y {:a 1}}}
   {:x {:y {:a 3}}})
(merge-with (partial (partial merge-with +)
   {:x {:y {:a 1}}}
   {:x {:y {:a 3}}})
)
(merge-with (partial (partial merge-with +))
   {:x {:y {:a 1}}}
   {:x {:y {:a 3}}})
(merge-with (partial merge-with +)
   {:x {:y 3 :g 5}}
  {:x {:y 4}})
(def x (cons 1 (cons 2 nil)))
(x true)
x
(defn cons [h t] #(if % h t))
(def x (cons 1 (cons 2 nil)))
(x true)
((x false)true)
(cons 2 [1 3 4])
(cons [1 3 4] 2)
(cons 2 [1 3 4])
'(println "aaa")
(println "aaa")
(use 'simple-recommendation-engine.core :reload)
(def user3-prefs-map {:item1 2 :item3 4})
(recommend-for-a-prefs-map coocurrence-matrix user3-prefs-map)
(def user3-prefs-map {:item3 2 :item2 4})
(recommend-for-a-prefs-map coocurrence-matrix user3-prefs-map)
(def user3-prefs-map {:item1 1 :item3 3})
(recommend-for-a-prefs-map coocurrence-matrix user3-prefs-map)
